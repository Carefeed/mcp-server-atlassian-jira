name: CI - Semantic Release

# This workflow is triggered on every push to the main branch
# It analyzes commits and automatically releases a new version when needed
on:
    push:
        branches: [main]

jobs:
    release:
        name: Semantic Release
        runs-on: ubuntu-latest
        # Permissions needed for creating releases, updating issues, and publishing packages
        permissions:
            contents: write # Needed to create releases and tags
            issues: write # Needed to comment on issues
            pull-requests: write # Needed to comment on pull requests
            packages: write # Needed to publish packages
            # workflows permission isn't supported in this context
        steps:
            # Step 1: Check out the full Git history for proper versioning
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0 # Fetches all history for all branches and tags

            # Step 2: Setup Node.js environment
            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 22 # Using Node.js 22
                  cache: 'npm' # Enable npm caching

            # Step 3: Install dependencies with clean install
            - name: Install dependencies
              run: npm ci # Clean install preserving package-lock.json

            # Step 4: Build the package
            - name: Build
              run: npm run build # Compiles TypeScript to JavaScript

            # Step 5: Run tests to ensure quality
            - name: Verify tests
              run: npm test # Runs Jest tests

            # Step 6: Configure Git identity for releases
            - name: Configure Git User
              run: |
                  git config --global user.email "actions@github.com"
                  git config --global user.name "GitHub Actions"

            # Step 7: Run semantic-release to analyze commits and publish to npm
            - name: Semantic Release
              id: semantic
              env:
                  # Tokens needed for GitHub and npm authentication
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # For creating releases and commenting
                  NPM_TOKEN: ${{ secrets.NPM_TOKEN }} # For publishing to npm
              run: |
                  echo "Running semantic-release for version bump and npm publishing"
                  npx semantic-release

                  # Set output variables for next steps
                  if [ $? -eq 0 ]; then
                    echo "new_release_published=true" >> $GITHUB_OUTPUT
                  else
                    echo "new_release_published=false" >> $GITHUB_OUTPUT
                  fi

                  echo "new_release_version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

            # Step 8: Publish to GitHub Packages if a new version was released
            - name: Publish to GitHub Packages
              if: steps.semantic.outputs.new_release_published == 'true'
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  # Debug information
                  echo "GitHub Repository: $GITHUB_REPOSITORY"
                  echo "Current working directory: $(pwd)"

                  # Configure GitHub Packages authentication
                  echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" > .npmrc
                  # Important: The scope must match exactly with the GitHub owner
                  echo "@aashari:registry=https://npm.pkg.github.com/" >> .npmrc

                  # Verify package.json name matches GitHub repo owner
                  PACKAGE_NAME=$(node -p "require('./package.json').name")
                  REPO_OWNER=$(echo "$GITHUB_REPOSITORY" | cut -d '/' -f 1)
                  echo "Package name: $PACKAGE_NAME, Repo owner: $REPO_OWNER"

                  # If needed, temporarily update package name to match repository owner
                  if [[ ! "$PACKAGE_NAME" == "@$REPO_OWNER/"* ]]; then
                    echo "Adjusting package name to match repository owner"
                    ORIGINAL_NAME="$PACKAGE_NAME"
                    NEW_NAME="@$REPO_OWNER/$(echo "$PACKAGE_NAME" | sed 's/^@[^/]*\///')"
                    sed -i "s|\"name\": \"$ORIGINAL_NAME\"|\"name\": \"$NEW_NAME\"|" package.json
                    echo "Adjusted package name from $ORIGINAL_NAME to $NEW_NAME"
                  fi

                  # Additional verification
                  echo "Checking for GitHub Packages access..."
                  curl -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/user/packages | grep -i aashari || echo "No packages found or no access"

                  # Setup npm access for GitHub Packages
                  npm config set registry https://npm.pkg.github.com/
                  npm config set //npm.pkg.github.com/:_authToken $GITHUB_TOKEN

                  # Show final .npmrc 
                  echo "Final .npmrc contents (removing auth token):"
                  cat .npmrc | sed 's/_authToken=.*/\_authToken=***/'

                  # Show final package.json name
                  echo "Final package name: $(node -p "require('./package.json').name")"

                  # Publish to GitHub Packages
                  npm publish --registry=https://npm.pkg.github.com/ --access public
              continue-on-error: true # Don't fail the workflow if GitHub Packages publishing fails
